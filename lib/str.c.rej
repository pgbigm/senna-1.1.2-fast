--- lib/str.c
+++ lib/str.c
@@ -635,37 +635,26 @@
   return sen_success;
 }
 
-/* Assume that nstr->flags is always zero */
-inline static sen_rc
-fast_normalize_utf8(sen_nstr *nstr)
+int
+fast_normalize_utf8(const char *orig, int orig_blen, char *norm,
+					int *norm_blen, int norm_maxlen)
 {
 	const unsigned char *s, *s_, *p, *p2, *pe, *e;
 	unsigned char *d, *d_, *de;
-	size_t ls, lp, size = nstr->orig_blen;
+	size_t ls, lp;
 	int		normed = 0;
-	static size_t	ds = 0;
-
-	if (ds < size * 3 || nstr->norm == NULL)
-	{
-		if (nstr->norm != NULL)
-			free(nstr->norm);
-		ds = size * 3;
-		nstr->norm = malloc(ds + 1);
-		if (nstr->norm == NULL)
-			return sen_memory_exhausted;
-	}
 
-	d = (unsigned char *)nstr->norm;
-	de = d + ds;
+	d = (unsigned char *) norm;
+	de = d + norm_maxlen;
 	d_ = NULL;
-	e = (unsigned char *)nstr->orig + size;
+	e = (unsigned char *) orig + orig_blen;
 
-	for (s = s_ = (unsigned char *)nstr->orig; ; s += ls)
+	for (s = s_ = (unsigned char *) orig; ; s += ls)
 	{
 		if (!(ls = fast_sen_str_charlen_utf8(s, e)))
 			break;
 
-		if ((p = (unsigned char *)sen_nfkc_map1(s)))
+		if ((p = (unsigned char *) sen_nfkc_map1(s)))
 		{
 			pe = p + strlen((char *)p);
 			normed = 1;
@@ -699,19 +688,7 @@
 					break;
 
 				if (de <= d + lp)
-				{
-					unsigned char *norm;
-
-					ds += (ds >> 1) + lp;
-					if (!(norm = realloc(nstr->norm, ds + 1)))
-					{
-						free(nstr->norm); nstr->norm = NULL;
-						return sen_memory_exhausted;
-					}
-					de = norm + ds;
-					d = norm + (d - (unsigned char *)nstr->norm);
-					nstr->norm = norm;
-				}
+					return -1;
 
 				memcpy(d, p, lp);
 				d_ = d;
@@ -723,19 +700,7 @@
 		else
 		{
 			if (de <= d + ls)
-			{
-				unsigned char *norm;
-
-				ds += (ds >> 1) + ls;
-				if (!(norm = realloc(nstr->norm, ds + 1)))
-				{
-					free(nstr->norm); nstr->norm = NULL;
-					return sen_memory_exhausted;
-				}
-				de = norm + ds;
-				d = norm + (d - (unsigned char *)nstr->norm);
-				nstr->norm = norm;
-			}
+				return -1;
 
 			memcpy(d, p, ls);
 			d_ = d;
@@ -1376,36 +1341,6 @@
   return nstr;
 }
 
-/*
- * Note that current encoding must be UTF-8.
- */
-sen_nstr *
-fast_sen_nstr_open(const char *str, size_t str_len)
-{
-	static sen_nstr *nstr = NULL;
-
-	if (!str)
-		return NULL;
-
-	if (nstr == NULL)
-	{
-		nstr = (sen_nstr *) malloc(sizeof(sen_nstr));
-		if (nstr == NULL)
-			return NULL;
-
-		nstr->norm = NULL;
-		nstr->norm_blen = 0;
-	}
-
-	nstr->orig = str;
-	nstr->orig_blen = str_len;
-
-    if (fast_normalize_utf8(nstr))
-		return NULL;
-
-	return nstr;
-}
-
 sen_nstr *
 sen_fakenstr_open(const char *str, size_t str_len, sen_encoding encoding, int flags)
 {
@@ -2147,31 +2082,3 @@
   sen_nstr_close(nstr);
   return len;
 }
-
-/*
- * Note that current encoding must be UTF-8.
- */
-int
-fast_sen_str_normalize(const char *str, unsigned int str_len,
-					   char *nstrbuf, int buf_size)
-{
-	int len;
-	sen_nstr *nstr;
-
-	if (!(nstr = fast_sen_nstr_open(str, str_len)))
-		return -1;
-
-	/*
-	 * If the buffer size is short to store for the normalized string,
-     * the required size is returned (to inform the caller to cast me again).
-	 */
-	len = (int)nstr->norm_blen;
-
-	if (buf_size > len)
-		memcpy(nstrbuf, nstr->norm, len + 1);
-	else if (buf_size == len)
-		/* NB: non-NULL-terminated */
-		memcpy(nstrbuf, nstr->norm, len);
-
-	return len;
-}
