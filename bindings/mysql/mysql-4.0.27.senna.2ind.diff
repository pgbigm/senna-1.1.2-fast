diff -Nurd mysql-4.0.27.senna/include/my_pthread.h mysql-4.0.27.senna.2ind/include/my_pthread.h
--- mysql-4.0.27.senna/include/my_pthread.h	2007-02-06 17:25:22.000000000 +0900
+++ mysql-4.0.27.senna.2ind/include/my_pthread.h	2007-02-08 17:41:26.000000000 +0900
@@ -652,6 +652,9 @@
   gptr dbug;
   char name[THREAD_NAME_SIZE+1];
 #endif
+#ifdef ENABLE_SENNA
+  int sen_flags;
+#endif /* ENABLE_SENNA */
 };
 
 extern struct st_my_thread_var *_my_thread_var(void) __attribute__ ((const));
diff -Nurd mysql-4.0.27.senna/libmysqld/filesort.cc mysql-4.0.27.senna.2ind/libmysqld/filesort.cc
--- mysql-4.0.27.senna/libmysqld/filesort.cc	2007-02-06 17:25:23.000000000 +0900
+++ mysql-4.0.27.senna.2ind/libmysqld/filesort.cc	2007-02-08 17:41:26.000000000 +0900
@@ -963,6 +963,9 @@
       }
       if (sortorder->field->maybe_null())
 	length++;				// Place for NULL marker
+#ifdef ENABLE_SENNA
+      my_thread_var->sen_flags |= 2;
+#endif /* ENABLE_SENNA */
     }
     else
     {
diff -Nurd mysql-4.0.27.senna/libmysqld/item_cmpfunc.cc mysql-4.0.27.senna.2ind/libmysqld/item_cmpfunc.cc
--- mysql-4.0.27.senna/libmysqld/item_cmpfunc.cc	2007-02-06 17:25:23.000000000 +0900
+++ mysql-4.0.27.senna.2ind/libmysqld/item_cmpfunc.cc	2007-02-08 17:41:26.000000000 +0900
@@ -24,6 +24,23 @@
 #include "mysql_priv.h"
 #include <m_ctype.h>
 
+#ifdef ENABLE_SENNA
+bool 
+Item_cond::needs_record()
+{
+  List_iterator_fast<Item> li(list);
+  Item *item;
+  while ((item=li++))
+  {
+    if (item->needs_record())
+    {
+      return true;
+    }
+  }
+  return false;
+}
+#endif /* ENABLE_SENNA */
+
 /*
   Test functions
   Most of these  returns 0LL if false and 1LL if true and
diff -Nurd mysql-4.0.27.senna/libmysqld/item_func.cc mysql-4.0.27.senna.2ind/libmysqld/item_func.cc
--- mysql-4.0.27.senna/libmysqld/item_func.cc	2007-02-06 17:25:23.000000000 +0900
+++ mysql-4.0.27.senna.2ind/libmysqld/item_func.cc	2007-02-08 17:41:26.000000000 +0900
@@ -2241,6 +2241,16 @@
 
   while ((item=li++))
   {
+#ifdef ENABLE_SENNA
+    if (my_thread_var->sen_flags) {
+      bool res;
+      bool set_query_id_backup = thd->set_query_id;
+      thd->set_query_id = false;
+      res = item->fix_fields(thd,tlist);
+      thd->set_query_id = set_query_id_backup;
+      if (res) { return 1; }
+    } else
+#endif /* ENABLE_SENNA */
     if (item->fix_fields(thd,tlist))
       return 1;
     if (item->type() == Item::REF_ITEM)
@@ -2284,7 +2294,11 @@
   for (keynr=0 ; keynr < table->keys ; keynr++)
   {
     if ((table->key_info[keynr].flags & HA_FULLTEXT) &&
-        (table->keys_in_use_for_query & (((key_map)1) << keynr)))
+        ((table->keys_in_use_for_query & (((key_map)1) << keynr))
+#ifdef ENABLE_SENNA
+	 || my_thread_var->sen_flags
+#endif /* ENABLE_SENNA */
+	 ))
     {
       ft_to_key[fts]=keynr;
       ft_cnt[fts]=0;
diff -Nurd mysql-4.0.27.senna/libmysqld/item_sum.cc mysql-4.0.27.senna.2ind/libmysqld/item_sum.cc
--- mysql-4.0.27.senna/libmysqld/item_sum.cc	2007-02-06 17:25:23.000000000 +0900
+++ mysql-4.0.27.senna.2ind/libmysqld/item_sum.cc	2007-02-08 17:41:26.000000000 +0900
@@ -925,6 +925,9 @@
 {
   List<Item> list;
   /* Create a table with an unique key over all parameters */
+#ifdef ENABLE_SENNA
+  my_thread_var->sen_flags |= 16;
+#endif /* ENABLE_SENNA */
   for (uint i=0; i < arg_count ; i++)
   {
     Item *item=args[i];
diff -Nurd mysql-4.0.27.senna/libmysqld/records.cc mysql-4.0.27.senna.2ind/libmysqld/records.cc
--- mysql-4.0.27.senna/libmysqld/records.cc	2007-02-06 17:25:23.000000000 +0900
+++ mysql-4.0.27.senna.2ind/libmysqld/records.cc	2007-02-08 17:41:26.000000000 +0900
@@ -92,6 +92,9 @@
     info->cache_pos=table->record_pointers;
     info->cache_end=info->cache_pos+ table->found_records*info->ref_length;
     info->read_record= rr_from_pointers;
+#ifdef ENABLE_SENNA
+    my_thread_var->sen_flags |= 4;
+#endif /* ENABLE_SENNA */
   }
   else
   {
@@ -191,6 +194,9 @@
 tryNext:
   if (my_b_read(info->io_cache,info->ref_pos,info->ref_length))
     return -1;					/* End of file */
+#ifdef ENABLE_SENNA
+  if ((my_thread_var->sen_flags & (1|4|8)) == (1|4)) { return 0; }
+#endif /* ENABLE_SENNA */
   if ((tmp=info->file->rnd_pos(info->record,info->ref_pos)))
   {
     if (tmp == HA_ERR_END_OF_FILE)
@@ -220,6 +226,9 @@
   cache_pos=info->cache_pos;
   info->cache_pos+=info->ref_length;
 
+#ifdef ENABLE_SENNA
+  if ((my_thread_var->sen_flags & (1|4|8)) == (1|4)) { return 0; }
+#endif /* ENABLE_SENNA */
   if ((tmp=info->file->rnd_pos(info->record,cache_pos)))
   {
     if (tmp == HA_ERR_END_OF_FILE)
diff -Nurd mysql-4.0.27.senna/libmysqld/sql_select.cc mysql-4.0.27.senna.2ind/libmysqld/sql_select.cc
--- mysql-4.0.27.senna/libmysqld/sql_select.cc	2007-02-06 17:25:23.000000000 +0900
+++ mysql-4.0.27.senna.2ind/libmysqld/sql_select.cc	2007-02-08 17:41:26.000000000 +0900
@@ -239,6 +239,11 @@
   /* Check that all tables, fields, conds and order are ok */
 
   select_distinct=test(select_options & SELECT_DISTINCT);
+#ifdef ENABLE_SENNA
+  my_thread_var->sen_flags = cur_sel->ftfunc_list.elements ? 1 : 0;
+  my_thread_var->sen_flags |= 32;
+  if (select_distinct) { my_thread_var->sen_flags |= 16; }
+#endif /* ENABLE_SENNA */
   tmp_table=0;
   select=0;
   no_order=skip_sort_order=0;
@@ -1034,6 +1039,9 @@
   }
   join.having=having;				// Actually a parameter
   thd->proc_info="Sending data";
+#ifdef ENABLE_SENNA
+  my_thread_var->sen_flags &= ~32;
+#endif /* ENABLE_SENNA */
   error=do_select(&join,&fields,NULL,procedure);
 
 err:
@@ -1830,7 +1838,11 @@
   for (; field != end ; field++)
     add_key_part(keyuse,field);
 
-  if (thd->lex.select->ftfunc_list.elements)
+  if (thd->lex.select->ftfunc_list.elements
+#ifdef ENABLE_SENNA
+      && !join_tab->table->force_index
+#endif /* ENABLE_SENNA */
+      )
   {
     add_ft_keys(keyuse,join_tab,cond,normal_tables);
   }
@@ -2923,6 +2935,9 @@
       table->file->index_init(tab->ref.key);
       tab->read_first_record= join_ft_read_first;
       tab->read_record.read_record= join_ft_read_next;
+#ifdef ENABLE_SENNA
+      my_thread_var->sen_flags |= 4;
+#endif /* ENABLE_SENNA */
       break;
     case JT_ALL:
       /*
@@ -4776,10 +4791,26 @@
   return sub_select(join,join_tab,end_of_records); /* Use ordinary select */
 }
 
+#ifdef ENABLE_SENNA
+static void
+decide_read_or_skip(JOIN *join,JOIN_TAB *join_tab,bool needs_record)
+{
+  if (needs_record || (my_thread_var->sen_flags & 48) ||
+      (join_tab->next_select != end_send_group &&
+       !join->thd->offset_limit && join->send_records < join->thd->select_limit)) {
+    my_thread_var->sen_flags |= 8;
+  } else {
+    my_thread_var->sen_flags &= ~8;
+  }
+}
+#endif /* ENABLE_SENNA */
 
 static int
 sub_select(JOIN *join,JOIN_TAB *join_tab,bool end_of_records)
 {
+#ifdef ENABLE_SENNA
+  if (join_tab->next_select == end_update) { my_thread_var->sen_flags &= ~4; }
+#endif /* ENABLE_SENNA */
 
   join_tab->table->null_row=0;
   if (end_of_records)
@@ -4789,7 +4820,11 @@
   int error;
   bool found=0;
   COND *on_expr=join_tab->on_expr, *select_cond=join_tab->select_cond;
+#ifdef ENABLE_SENNA
+  bool needs_record = select_cond ? select_cond->needs_record() : false;
 
+  decide_read_or_skip(join, join_tab, needs_record);
+#endif /* ENABLE_SENNA */
   if (!(error=(*join_tab->read_first_record)(join_tab)))
   {
     bool not_exists_optimize= join_tab->table->reginfo.not_exists_optimize;
@@ -4825,6 +4860,9 @@
 	else
 	  info->file->unlock_row();
       }
+#ifdef ENABLE_SENNA
+      decide_read_or_skip(join, join_tab, needs_record);
+#endif /* ENABLE_SENNA */
     } while (!(error=info->read_record(info)));
   }
   if (error > 0)				// Fatal error
@@ -5238,7 +5276,13 @@
   tab->read_record.file=table->file;
   tab->read_record.index=tab->index;
   tab->read_record.record=table->record[0];
-  error=tab->table->file->index_first(tab->table->record[0]);
+#ifdef ENABLE_SENNA
+  if (my_thread_var->sen_flags & 1) { my_thread_var->sen_flags |= 4; }
+  if ((my_thread_var->sen_flags & (1|4|8)) == (1|4)) {
+    error=tab->table->file->index_first(NULL);
+  } else
+#endif /* ENABLE_SENNA */
+    error=tab->table->file->index_first(tab->table->record[0]);
   if (error)
   {
     if (error != HA_ERR_KEY_NOT_FOUND && error != HA_ERR_END_OF_FILE)
@@ -5258,7 +5302,13 @@
 static int
 join_read_next(READ_RECORD *info)
 {
-  int error=info->file->index_next(info->record);
+  int error;
+#ifdef ENABLE_SENNA
+  if ((my_thread_var->sen_flags & (1|4|8)) == (1|4)) {
+    error=info->file->index_next(NULL);
+  } else
+#endif /* ENABLE_SENNA */
+    error=info->file->index_next(info->record);
   if (error)
   {
     if (error != HA_ERR_END_OF_FILE)
@@ -5292,7 +5342,13 @@
   tab->read_record.file=table->file;
   tab->read_record.index=tab->index;
   tab->read_record.record=table->record[0];
-  error=tab->table->file->index_last(tab->table->record[0]);
+#ifdef ENABLE_SENNA
+  if (my_thread_var->sen_flags & 1) { my_thread_var->sen_flags |= 4; }
+  if ((my_thread_var->sen_flags & (1|4|8)) == (1|4)) {
+    error=tab->table->file->index_last(NULL);
+  } else
+#endif /* ENABLE_SENNA */
+    error=tab->table->file->index_last(tab->table->record[0]);
   if (error)
   {
     if (error != HA_ERR_END_OF_FILE)
@@ -5312,7 +5368,13 @@
 static int
 join_read_prev(READ_RECORD *info)
 {
-  int error=info->file->index_prev(info->record);
+  int error;
+#ifdef ENABLE_SENNA
+  if ((my_thread_var->sen_flags & (1|4|8)) == (1|4)) {
+    error=info->file->index_prev(NULL);
+  } else
+#endif /* ENABLE_SENNA */
+    error=info->file->index_prev(info->record);
   if (error)
   {
     if (error != HA_ERR_END_OF_FILE)
@@ -5336,6 +5398,9 @@
   int error;
   TABLE *table= tab->table;
 
+#ifdef ENABLE_SENNA
+  if (my_thread_var->sen_flags & 1) { my_thread_var->sen_flags |= 4; }
+#endif /* ENABLE_SENNA */
 #if NOT_USED_YET
   if (cp_buffer_from_ref(&tab->ref))       // as ft-key doesn't use store_key's
     return -1;                             // see also FT_SELECT::init()
@@ -6159,6 +6224,11 @@
   SQL_SELECT *select=tab->select;
   DBUG_ENTER("create_sort_index");
 
+#ifdef ENABLE_SENNA
+  if (tab->select_cond && tab->select_cond->needs_record()) {
+    my_thread_var->sen_flags |= 8;
+  }
+#endif /* ENABLE_SENNA */
   if (test_if_skip_sort_order(tab,order,select_limit,0))
     DBUG_RETURN(0);
   if (!(sortorder=make_unireg_sortorder(order,&length)))
diff -Nurd mysql-4.0.27.senna/myisam/ft_boolean_search.c mysql-4.0.27.senna.2ind/myisam/ft_boolean_search.c
--- mysql-4.0.27.senna/myisam/ft_boolean_search.c	2007-02-08 16:19:06.000000000 +0900
+++ mysql-4.0.27.senna.2ind/myisam/ft_boolean_search.c	2007-02-08 17:41:26.000000000 +0900
@@ -513,6 +513,7 @@
     while (ftb->sir && sen_records_next(ftb->sir, &pos, sizeof(my_off_t), NULL)) {
       info->update&= (HA_STATE_CHANGED | HA_STATE_ROW_CHANGED);
       info->lastpos=pos;
+      if (!(my_thread_var->sen_flags & (8|2))) { return 0; }
       if (!(*info->read_record)(info,info->lastpos,record)) {
         info->update|= HA_STATE_AKTIV;          /* Record is read */
         return 0;
diff -Nurd mysql-4.0.27.senna/myisam/ft_nlq_search.c mysql-4.0.27.senna.2ind/myisam/ft_nlq_search.c
--- mysql-4.0.27.senna/myisam/ft_nlq_search.c	2007-02-06 17:29:15.000000000 +0900
+++ mysql-4.0.27.senna.2ind/myisam/ft_nlq_search.c	2007-02-08 17:41:26.000000000 +0900
@@ -270,6 +270,7 @@
     while (sen_records_next(handler->sir, &pos, sizeof(my_off_t), NULL))
     {
       info->lastpos=pos;
+      if (!(my_thread_var->sen_flags & (8|2))) { return 0; }
       if (!(*info->read_record)(info,info->lastpos,record))
       {
 	info->update|= HA_STATE_AKTIV;		/* Record is read */
diff -Nurd mysql-4.0.27.senna/sql/filesort.cc mysql-4.0.27.senna.2ind/sql/filesort.cc
--- mysql-4.0.27.senna/sql/filesort.cc	2007-02-06 17:25:22.000000000 +0900
+++ mysql-4.0.27.senna.2ind/sql/filesort.cc	2007-02-08 17:41:26.000000000 +0900
@@ -963,6 +963,9 @@
       }
       if (sortorder->field->maybe_null())
 	length++;				// Place for NULL marker
+#ifdef ENABLE_SENNA
+      my_thread_var->sen_flags |= 2;
+#endif /* ENABLE_SENNA */
     }
     else
     {
diff -Nurd mysql-4.0.27.senna/sql/item.h mysql-4.0.27.senna.2ind/sql/item.h
--- mysql-4.0.27.senna/sql/item.h	2007-02-06 17:25:22.000000000 +0900
+++ mysql-4.0.27.senna.2ind/sql/item.h	2007-02-08 17:41:26.000000000 +0900
@@ -103,6 +103,9 @@
   virtual bool get_date_result(TIME *ltime,bool fuzzydate)
   { return get_date(ltime,fuzzydate); }
   virtual bool is_null() { return 0; }
+#ifdef ENABLE_SENNA
+  virtual bool needs_record() { return true; }
+#endif /* ENABLE_SENNA */
   virtual unsigned int size_of()= 0;
   virtual void top_level_item() {}
   virtual void set_result_field(Field *field) {}
diff -Nurd mysql-4.0.27.senna/sql/item_cmpfunc.cc mysql-4.0.27.senna.2ind/sql/item_cmpfunc.cc
--- mysql-4.0.27.senna/sql/item_cmpfunc.cc	2007-02-06 17:25:22.000000000 +0900
+++ mysql-4.0.27.senna.2ind/sql/item_cmpfunc.cc	2007-02-08 17:41:26.000000000 +0900
@@ -24,6 +24,23 @@
 #include "mysql_priv.h"
 #include <m_ctype.h>
 
+#ifdef ENABLE_SENNA
+bool 
+Item_cond::needs_record()
+{
+  List_iterator_fast<Item> li(list);
+  Item *item;
+  while ((item=li++))
+  {
+    if (item->needs_record())
+    {
+      return true;
+    }
+  }
+  return false;
+}
+#endif /* ENABLE_SENNA */
+
 /*
   Test functions
   Most of these  returns 0LL if false and 1LL if true and
diff -Nurd mysql-4.0.27.senna/sql/item_cmpfunc.h mysql-4.0.27.senna.2ind/sql/item_cmpfunc.h
--- mysql-4.0.27.senna/sql/item_cmpfunc.h	2007-02-06 17:25:22.000000000 +0900
+++ mysql-4.0.27.senna.2ind/sql/item_cmpfunc.h	2007-02-08 17:41:26.000000000 +0900
@@ -589,6 +589,9 @@
   bool add(Item *item) { return list.push_back(item); }
   bool fix_fields(THD *,struct st_table_list *);
 
+#ifdef ENABLE_SENNA
+  bool needs_record();
+#endif /* ENABLE_SENNA */
   enum Type type() const { return COND_ITEM; }
   List<Item>* argument_list() { return &list; }
   table_map used_tables() const;
diff -Nurd mysql-4.0.27.senna/sql/item_func.cc mysql-4.0.27.senna.2ind/sql/item_func.cc
--- mysql-4.0.27.senna/sql/item_func.cc	2007-02-06 17:25:22.000000000 +0900
+++ mysql-4.0.27.senna.2ind/sql/item_func.cc	2007-02-08 17:41:26.000000000 +0900
@@ -2241,6 +2241,16 @@
 
   while ((item=li++))
   {
+#ifdef ENABLE_SENNA
+    if (my_thread_var->sen_flags) {
+      bool res;
+      bool set_query_id_backup = thd->set_query_id;
+      thd->set_query_id = false;
+      res = item->fix_fields(thd,tlist);
+      thd->set_query_id = set_query_id_backup;
+      if (res) { return 1; }
+    } else
+#endif /* ENABLE_SENNA */
     if (item->fix_fields(thd,tlist))
       return 1;
     if (item->type() == Item::REF_ITEM)
@@ -2284,7 +2294,11 @@
   for (keynr=0 ; keynr < table->keys ; keynr++)
   {
     if ((table->key_info[keynr].flags & HA_FULLTEXT) &&
-        (table->keys_in_use_for_query & (((key_map)1) << keynr)))
+        ((table->keys_in_use_for_query & (((key_map)1) << keynr))
+#ifdef ENABLE_SENNA
+	 || my_thread_var->sen_flags
+#endif /* ENABLE_SENNA */
+	 ))
     {
       ft_to_key[fts]=keynr;
       ft_cnt[fts]=0;
diff -Nurd mysql-4.0.27.senna/sql/item_func.h mysql-4.0.27.senna.2ind/sql/item_func.h
--- mysql-4.0.27.senna/sql/item_func.h	2007-02-06 17:25:22.000000000 +0900
+++ mysql-4.0.27.senna.2ind/sql/item_func.h	2007-02-08 17:41:26.000000000 +0900
@@ -984,6 +984,9 @@
   table_map not_null_tables() const { return 0; }
   bool fix_fields(THD *thd,struct st_table_list *tlist);
   bool eq(const Item *, bool binary_cmp) const;
+#ifdef ENABLE_SENNA
+  bool needs_record() { return false; }
+#endif /* ENABLE_SENNA */
   longlong val_int() { return val()!=0.0; }
   double val();
 
diff -Nurd mysql-4.0.27.senna/sql/item_sum.cc mysql-4.0.27.senna.2ind/sql/item_sum.cc
--- mysql-4.0.27.senna/sql/item_sum.cc	2007-02-06 17:25:22.000000000 +0900
+++ mysql-4.0.27.senna.2ind/sql/item_sum.cc	2007-02-08 17:41:26.000000000 +0900
@@ -925,6 +925,9 @@
 {
   List<Item> list;
   /* Create a table with an unique key over all parameters */
+#ifdef ENABLE_SENNA
+  my_thread_var->sen_flags |= 16;
+#endif /* ENABLE_SENNA */
   for (uint i=0; i < arg_count ; i++)
   {
     Item *item=args[i];
diff -Nurd mysql-4.0.27.senna/sql/records.cc mysql-4.0.27.senna.2ind/sql/records.cc
--- mysql-4.0.27.senna/sql/records.cc	2007-02-06 17:25:22.000000000 +0900
+++ mysql-4.0.27.senna.2ind/sql/records.cc	2007-02-08 17:41:26.000000000 +0900
@@ -92,6 +92,9 @@
     info->cache_pos=table->record_pointers;
     info->cache_end=info->cache_pos+ table->found_records*info->ref_length;
     info->read_record= rr_from_pointers;
+#ifdef ENABLE_SENNA
+    my_thread_var->sen_flags |= 4;
+#endif /* ENABLE_SENNA */
   }
   else
   {
@@ -191,6 +194,9 @@
 tryNext:
   if (my_b_read(info->io_cache,info->ref_pos,info->ref_length))
     return -1;					/* End of file */
+#ifdef ENABLE_SENNA
+  if ((my_thread_var->sen_flags & (1|4|8)) == (1|4)) { return 0; }
+#endif /* ENABLE_SENNA */
   if ((tmp=info->file->rnd_pos(info->record,info->ref_pos)))
   {
     if (tmp == HA_ERR_END_OF_FILE)
@@ -220,6 +226,9 @@
   cache_pos=info->cache_pos;
   info->cache_pos+=info->ref_length;
 
+#ifdef ENABLE_SENNA
+  if ((my_thread_var->sen_flags & (1|4|8)) == (1|4)) { return 0; }
+#endif /* ENABLE_SENNA */
   if ((tmp=info->file->rnd_pos(info->record,cache_pos)))
   {
     if (tmp == HA_ERR_END_OF_FILE)
diff -Nurd mysql-4.0.27.senna/sql/sql_select.cc mysql-4.0.27.senna.2ind/sql/sql_select.cc
--- mysql-4.0.27.senna/sql/sql_select.cc	2007-02-06 17:25:22.000000000 +0900
+++ mysql-4.0.27.senna.2ind/sql/sql_select.cc	2007-02-08 17:41:26.000000000 +0900
@@ -239,6 +239,11 @@
   /* Check that all tables, fields, conds and order are ok */
 
   select_distinct=test(select_options & SELECT_DISTINCT);
+#ifdef ENABLE_SENNA
+  my_thread_var->sen_flags = cur_sel->ftfunc_list.elements ? 1 : 0;
+  my_thread_var->sen_flags |= 32;
+  if (select_distinct) { my_thread_var->sen_flags |= 16; }
+#endif /* ENABLE_SENNA */
   tmp_table=0;
   select=0;
   no_order=skip_sort_order=0;
@@ -1034,6 +1039,9 @@
   }
   join.having=having;				// Actually a parameter
   thd->proc_info="Sending data";
+#ifdef ENABLE_SENNA
+  my_thread_var->sen_flags &= ~32;
+#endif /* ENABLE_SENNA */
   error=do_select(&join,&fields,NULL,procedure);
 
 err:
@@ -1830,7 +1838,11 @@
   for (; field != end ; field++)
     add_key_part(keyuse,field);
 
-  if (thd->lex.select->ftfunc_list.elements)
+  if (thd->lex.select->ftfunc_list.elements
+#ifdef ENABLE_SENNA
+      && !join_tab->table->force_index
+#endif /* ENABLE_SENNA */
+      )
   {
     add_ft_keys(keyuse,join_tab,cond,normal_tables);
   }
@@ -2923,6 +2935,9 @@
       table->file->index_init(tab->ref.key);
       tab->read_first_record= join_ft_read_first;
       tab->read_record.read_record= join_ft_read_next;
+#ifdef ENABLE_SENNA
+      my_thread_var->sen_flags |= 4;
+#endif /* ENABLE_SENNA */
       break;
     case JT_ALL:
       /*
@@ -4776,10 +4791,26 @@
   return sub_select(join,join_tab,end_of_records); /* Use ordinary select */
 }
 
+#ifdef ENABLE_SENNA
+static void
+decide_read_or_skip(JOIN *join,JOIN_TAB *join_tab,bool needs_record)
+{
+  if (needs_record || (my_thread_var->sen_flags & 48) ||
+      (join_tab->next_select != end_send_group &&
+       !join->thd->offset_limit && join->send_records < join->thd->select_limit)) {
+    my_thread_var->sen_flags |= 8;
+  } else {
+    my_thread_var->sen_flags &= ~8;
+  }
+}
+#endif /* ENABLE_SENNA */
 
 static int
 sub_select(JOIN *join,JOIN_TAB *join_tab,bool end_of_records)
 {
+#ifdef ENABLE_SENNA
+  if (join_tab->next_select == end_update) { my_thread_var->sen_flags &= ~4; }
+#endif /* ENABLE_SENNA */
 
   join_tab->table->null_row=0;
   if (end_of_records)
@@ -4789,7 +4820,11 @@
   int error;
   bool found=0;
   COND *on_expr=join_tab->on_expr, *select_cond=join_tab->select_cond;
+#ifdef ENABLE_SENNA
+  bool needs_record = select_cond ? select_cond->needs_record() : false;
 
+  decide_read_or_skip(join, join_tab, needs_record);
+#endif /* ENABLE_SENNA */
   if (!(error=(*join_tab->read_first_record)(join_tab)))
   {
     bool not_exists_optimize= join_tab->table->reginfo.not_exists_optimize;
@@ -4825,6 +4860,9 @@
 	else
 	  info->file->unlock_row();
       }
+#ifdef ENABLE_SENNA
+      decide_read_or_skip(join, join_tab, needs_record);
+#endif /* ENABLE_SENNA */
     } while (!(error=info->read_record(info)));
   }
   if (error > 0)				// Fatal error
@@ -5238,7 +5276,13 @@
   tab->read_record.file=table->file;
   tab->read_record.index=tab->index;
   tab->read_record.record=table->record[0];
-  error=tab->table->file->index_first(tab->table->record[0]);
+#ifdef ENABLE_SENNA
+  if (my_thread_var->sen_flags & 1) { my_thread_var->sen_flags |= 4; }
+  if ((my_thread_var->sen_flags & (1|4|8)) == (1|4)) {
+    error=tab->table->file->index_first(NULL);
+  } else
+#endif /* ENABLE_SENNA */
+    error=tab->table->file->index_first(tab->table->record[0]);
   if (error)
   {
     if (error != HA_ERR_KEY_NOT_FOUND && error != HA_ERR_END_OF_FILE)
@@ -5258,7 +5302,13 @@
 static int
 join_read_next(READ_RECORD *info)
 {
-  int error=info->file->index_next(info->record);
+  int error;
+#ifdef ENABLE_SENNA
+  if ((my_thread_var->sen_flags & (1|4|8)) == (1|4)) {
+    error=info->file->index_next(NULL);
+  } else
+#endif /* ENABLE_SENNA */
+    error=info->file->index_next(info->record);
   if (error)
   {
     if (error != HA_ERR_END_OF_FILE)
@@ -5292,7 +5342,13 @@
   tab->read_record.file=table->file;
   tab->read_record.index=tab->index;
   tab->read_record.record=table->record[0];
-  error=tab->table->file->index_last(tab->table->record[0]);
+#ifdef ENABLE_SENNA
+  if (my_thread_var->sen_flags & 1) { my_thread_var->sen_flags |= 4; }
+  if ((my_thread_var->sen_flags & (1|4|8)) == (1|4)) {
+    error=tab->table->file->index_last(NULL);
+  } else
+#endif /* ENABLE_SENNA */
+    error=tab->table->file->index_last(tab->table->record[0]);
   if (error)
   {
     if (error != HA_ERR_END_OF_FILE)
@@ -5312,7 +5368,13 @@
 static int
 join_read_prev(READ_RECORD *info)
 {
-  int error=info->file->index_prev(info->record);
+  int error;
+#ifdef ENABLE_SENNA
+  if ((my_thread_var->sen_flags & (1|4|8)) == (1|4)) {
+    error=info->file->index_prev(NULL);
+  } else
+#endif /* ENABLE_SENNA */
+    error=info->file->index_prev(info->record);
   if (error)
   {
     if (error != HA_ERR_END_OF_FILE)
@@ -5336,6 +5398,9 @@
   int error;
   TABLE *table= tab->table;
 
+#ifdef ENABLE_SENNA
+  if (my_thread_var->sen_flags & 1) { my_thread_var->sen_flags |= 4; }
+#endif /* ENABLE_SENNA */
 #if NOT_USED_YET
   if (cp_buffer_from_ref(&tab->ref))       // as ft-key doesn't use store_key's
     return -1;                             // see also FT_SELECT::init()
@@ -6159,6 +6224,11 @@
   SQL_SELECT *select=tab->select;
   DBUG_ENTER("create_sort_index");
 
+#ifdef ENABLE_SENNA
+  if (tab->select_cond && tab->select_cond->needs_record()) {
+    my_thread_var->sen_flags |= 8;
+  }
+#endif /* ENABLE_SENNA */
   if (test_if_skip_sort_order(tab,order,select_limit,0))
     DBUG_RETURN(0);
   if (!(sortorder=make_unireg_sortorder(order,&length)))
